import java.util.ArrayList;
import java.util.List;

import com.google.gson.GsonBuilder;

public class Main {
	
	public static ArrayList<Block> blockchain = new ArrayList<Block>();
	public static Database database = new Database();
	
	public static void main(String[] args) {
		
		//add our blocks to the block chain ArrayList:
		blockchain.add( new Block("Genesis", "0") );	
				
		//Print the whole BlockChain
		String blockchainJson = new GsonBuilder().setPrettyPrinting().create().toJson(blockchain);
		System.out.println(blockchainJson);
				
		//Supposed that we met a condition where we need to elect a block master from the BlockChain
		//Add the new block created by the elected Block
		blockMasterElection elector = new blockMasterElection();
		blockchain.add( new Block( "New block generated by genesis block", elector.electBlock( blockchain ).blockHash ) );
		
		//Print the whole BlockChain again
		blockchainJson = new GsonBuilder().setPrettyPrinting().create().toJson(blockchain);
		System.out.println("\n\n" + blockchainJson);
		
		//Testing: Save the entire blockchain to database file named blockchainDb.db on PingCoin root folder
		//Recommended to use http://sqlitebrowser.org/ to open the .db file
		for (Block block : blockchain)
			database.addBlock(block);
		database.readBlock();
		
		//testing markleTree
		 List<String> tempTxList = new ArrayList<String>();
		    tempTxList.add("TXIN:x,Value:50,TXOUT:y");
		    tempTxList.add("TXIN:y,Value:20,TXOUT:g");
		    tempTxList.add("TXIN:a,Value:10,TXOUT:b");
		    tempTxList.add("TXIN:t,Value:15,TXOUT:v");
		    tempTxList.add("TXIN:L,Value:67,TXOUT:o");
		    
		    markleTree merkleTrees = new markleTree(tempTxList);
		    merkleTrees.merkle_tree();
		    System.out.println("root : " + merkleTrees.getRoot());
	}
}
